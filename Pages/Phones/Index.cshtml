@page
@model EF_CRUD.Pages.Phones.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort">
                    @Html.DisplayNameFor(model => model.Phone[0].ClientID)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort">
                    @Html.DisplayNameFor(model => model.Phone[0].PhoneNumber)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort">
                    @Html.DisplayNameFor(model => model.Phone[0].PhoneType)
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Phone) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ClientID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhoneNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhoneType)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.PhoneID">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.PhoneID">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.PhoneID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

@{
    var prevDisabled = !Model.Phone.HasPreviousPage() ? "disabled" : "";
    var nextDisabled = !Model.Phone.HasNextPage() ? "disabled" : "";
}

<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Phone.PageIndex - 1)"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Phone.PageIndex + 1)"
   class="btn btn-primary @nextDisabled">
    Next
</a>